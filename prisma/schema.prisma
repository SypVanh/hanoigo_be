generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int          @id @default(autoincrement())
  email          String       @unique
  hashedPassword String
  fullName       String
  address        String
  language       String
  dob            DateTime
  avatar         Bytes?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  //relationship
  notes          Note[]
  collection     Collection?
  journeyLogs    JourneyLog[]
  comments       Comment[]
  tasks          UserTask[]
}

model JourneyLog {
  id         Int      @id @default(autoincrement())
  title      String
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  locationId Int
  location   Location @relation(fields: [locationId], references: [id])
}

model Collection {
  id               Int                         @id @default(autoincrement())
  title            String
  userId           Int                         @unique
  user             User                        @relation(fields: [userId], references: [id])
  collectibleItems CollectionCollectibleItem[]
}

model Comment {
  id         Int      @id @default(autoincrement())
  content    String
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  locationId Int
  location   Location @relation(fields: [locationId], references: [id])
}

model Task {
  id                Int              @id @default(autoincrement())
  title             String
  locationId        Int
  location          Location         @relation(fields: [locationId], references: [id])
  users             UserTask[]
  collectibleItem   CollectibleItem? @relation(fields: [collectibleItemId], references: [id])
  collectibleItemId Int?             @unique
}

model Location {
  id          Int                @id @default(autoincrement())
  name        String
  comments    Comment[]
  journeyLogs JourneyLog[]
  markers     Marker[]
  tasks       Task[]
  images      LocationImage[]
  categories  CategoryLocation[]
}

model Category {
  id        Int                @id @default(autoincrement())
  name      String
  locations CategoryLocation[]
}

model CategoryLocation {
  locationId Int
  categoryId Int
  location   Location @relation(fields: [locationId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])

  @@id([locationId, categoryId])
}

model Marker {
  id                Int              @id @default(autoincrement())
  name              String
  locationId        Int
  location          Location         @relation(fields: [locationId], references: [id])
  collectibleItemId Int?
  collectibleItem   CollectibleItem? @relation(fields: [collectibleItemId], references: [id])
}

model LocationImage {
  id         Int      @id @default(autoincrement())
  url        String
  locationId Int
  location   Location @relation(fields: [locationId], references: [id])
}

model CollectibleItem {
  id          Int                         @id @default(autoincrement())
  name        String
  collections CollectionCollectibleItem[]
  markers     Marker[]
  task        Task?
}

model CollectionCollectibleItem {
  collectionId      Int
  collectibleItemId Int
  collection        Collection      @relation(fields: [collectionId], references: [id])
  collectibleItem   CollectibleItem @relation(fields: [collectibleItemId], references: [id])

  @@id([collectionId, collectibleItemId])
}

model UserTask {
  userId Int
  taskId Int
  user   User @relation(fields: [userId], references: [id])
  task   Task @relation(fields: [taskId], references: [id])

  @@id([userId, taskId])
}

//One user can "write" Many notes
model Note {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  url         String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  //relationship
  userId      Int //like "foreign key"
  user        User     @relation(fields: [userId], references: [id])

  @@map("notes")
}
